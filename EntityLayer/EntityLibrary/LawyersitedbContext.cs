// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
#nullable disable

namespace EntityLayer.EntityLibrary
{
    public partial class LawyersitedbContext : DbContext
    {

        public LawyersitedbContext(DbContextOptions<LawyersitedbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BlogContents> BlogContents { get; set; }
        public virtual DbSet<Blogs> Blogs { get; set; }
        public virtual DbSet<Bulletins> Bulletins { get; set; }
        public virtual DbSet<SystemUsers> SystemUsers { get; set; }
        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    if (!optionsBuilder.IsConfigured)
        //    {
        //        IConfigurationRoot configuration = new ConfigurationBuilder()
        //           .SetBasePath(Directory.GetCurrentDirectory())
        //           .AddJsonFile("appsettings.json")
        //           .Build();
        //        var connectionString = configuration.GetConnectionString("DbCoreConnectionString");
        //        optionsBuilder.UseSqlServer(connectionString);
        //    }
        //}
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Turkish_CI_AS");

            modelBuilder.Entity<BlogContents>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Title).HasMaxLength(4000); 

                entity.HasOne(d => d.Blog)
                    .WithMany(p => p.BlogContents)
                    .HasForeignKey(d => d.BlogId)
                    .HasConstraintName("FK_BlogContents_Blogs");

                entity.HasOne(d => d.CreatedBy)
                    .WithMany(p => p.BlogContentsCreatedBy)
                    .HasForeignKey(d => d.CreatedById)
                    .HasConstraintName("FK_BlogContents_SystemUsers");

                entity.HasOne(d => d.DeletedBy)
                    .WithMany(p => p.BlogContentsDeletedBy)
                    .HasForeignKey(d => d.DeletedById)
                    .HasConstraintName("FK_BlogContents_SystemUsers1");
            });

            modelBuilder.Entity<Blogs>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasColumnType("datetime");
                entity.Property(e => e.Description).HasColumnType("text");
                entity.Property(e => e.DisplayedDate).HasColumnType("date");

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.CreatedBy)
                    .WithMany(p => p.Blogs)
                    .HasForeignKey(d => d.CreatedById)
                    .HasConstraintName("FK_Blogs_SystemUsers");
            });

            modelBuilder.Entity<Bulletins>(entity =>
            {
                entity.Property(e => e.Contents).HasColumnType("text");

                entity.Property(e => e.DisplayDateTime).HasColumnType("date");
            });

            modelBuilder.Entity<SystemUsers>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Mail).HasMaxLength(250);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Password).HasMaxLength(250);

                entity.Property(e => e.Surname).HasMaxLength(100);
            });

            OnModelCreatingPartial(modelBuilder);


        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}